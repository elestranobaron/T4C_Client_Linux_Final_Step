// xtree internal header

#if 1000 < _MSC_VER /*IFSTRIP=IGN*/
#pragma once
#endif

#ifndef _XTREE_
#define _XTREE_
#include <functional>
#include <memory>
#include <stdexcept>

#ifdef  _MSC_VER
#pragma pack(push,8)
#endif  /* _MSC_VER */
#if 1200 <= _MSC_VER
#pragma warning(push,3)
#endif
 #pragma warning(disable:4127 4284)
_STD_BEGIN

		// TEMPLATE CLASS _Tree_val
template<class _Tr>
	class _Tree_val : public _Tr {
protected:
	typedef typename _Tr::allocator_type allocator_type;
	typedef typename _Tr::key_compare key_compare;
	_Tree_val(const key_compare& _Parg,
		allocator_type _Al)
		: _Tr(_Parg), _Alval(_Al) {}
	allocator_type _Alval;
	};

		// TEMPLATE CLASS _Tree
template<class _Tr>
	class _Tree
		: public _Tree_val<_Tr> {
public:
	typedef _Tree<_Tr> _Myt;
	typedef _Tree_val<_Tr> _Mybase;
	typedef typename _Tr::key_type key_type;
	typedef typename _Tr::key_compare key_compare;
	typedef typename _Tr::value_compare value_compare;
	typedef typename _Tr::value_type value_type;
	typedef typename _Tr::allocator_type allocator_type;
protected:
	typedef _POINTER_X(void, allocator_type) _Genptr;
	struct _Node;
	friend struct _Node;
	struct _Node {
		_Genptr _Left, _Parent, _Right;
		value_type _Value;
		char _Color, _Isnil;
		};
	enum _Redbl {_Red, _Black};
	typedef _POINTER_X(_Node, allocator_type) _Nodeptr;
	typedef _REFERENCE_X(_Nodeptr, allocator_type) _Nodepref;
	typedef _CREFERENCE_X(key_type, allocator_type) _Keyref;
	typedef _REFERENCE_X(char, allocator_type) _Charref;
	typedef _REFERENCE_X(value_type, allocator_type) _Vref;

	static _Charref _Color(_Nodeptr _P)
		{return ((_Charref)(*_P)._Color); }
	static _Charref _Isnil(_Nodeptr _P)
		{return ((_Charref)(*_P)._Isnil); }
	static _Keyref _Key(_Nodeptr _P)
		{return (_Kfn()(_Value(_P))); }
	static _Nodepref _Left(_Nodeptr _P)
		{return ((_Nodepref)(*_P)._Left); }
	static _Nodepref _Parent(_Nodeptr _P)
		{return ((_Nodepref)(*_P)._Parent); }
	static _Nodepref _Right(_Nodeptr _P)
		{return ((_Nodepref)(*_P)._Right); }
	static _Vref _Value(_Nodeptr _P)
		{return ((_Vref)(*_P)._Value); }
public:
	typedef typename allocator_type::size_type size_type;
	typedef typename allocator_type::difference_type _Dift;
	typedef _Dift difference_type;
	typedef _POINTER_X(value_type, allocator_type) _Tptr;
	typedef _CPOINTER_X(value_type, allocator_type) _Ctptr;
	typedef _REFERENCE_X(value_type, allocator_type) _Reft;
	typedef _Tptr pointer;
	typedef _Ctptr const_pointer;
	typedef _Reft reference;
	typedef _CREFERENCE_X(value_type, allocator_type)
		const_reference;

		// CLASS iterator
	class iterator;
	friend class iterator;
	class iterator : public _Bidit<value_type, _Dift,
		_Tptr, _Reft> {
	public:
		typedef _Bidit<value_type, _Dift,
			_Tptr, _Reft> _Mybase;
		typedef typename _Mybase::iterator_category
			iterator_category;
//		typedef typename _Mybase::value_type value_type;
		typedef typename _Mybase::difference_type
			difference_type;
		typedef typename _Mybase::pointer pointer;
		typedef typename _Mybase::reference reference;
		iterator()
			: _Ptr(0) {}
		iterator(_Nodeptr _P)
			: _Ptr(_P) {}
		reference operator*() const
			{return (_Value(_Ptr)); }
		_Tptr operator->() const
			{return (&**this); }
		iterator& operator++()
			{_Inc();
			return (*this); }
		iterator operator++(int)
			{iterator _Tmp = *this;
			++*this;
			return (_Tmp); }
		iterator& operator--()
			{_Dec();
			return (*this); }
		iterator operator--(int)
			{iterator _Tmp = *this;
			--*this;
			return (_Tmp); }
		bool operator==(const iterator& _X) const
			{return (_Ptr == _X._Ptr); }
		bool operator!=(const iterator& _X) const
			{return (!(*this == _X)); }
		void _Dec()
			{if (_Isnil(_Ptr))
				_Ptr = _Right(_Ptr);
			else if (!_Isnil(_Left(_Ptr)))
				_Ptr = _Max(_Left(_Ptr));
			else
				{_Nodeptr _P;
				while (!_Isnil(_P = _Parent(_Ptr))
					&& _Ptr == _Left(_P))
					_Ptr = _P;
				if (!_Isnil(_P))
					_Ptr = _P; }}
		void _Inc()
			{if (_Isnil(_Ptr))
				;
			else if (!_Isnil(_Right(_Ptr)))
				_Ptr = _Min(_Right(_Ptr));
			else
				{_Nodeptr _P;
				while (!_Isnil(_P = _Parent(_Ptr))
					&& _Ptr == _Right(_P))
					_Ptr = _P;
				_Ptr = _P; }}
		_Nodeptr _Mynode() const
			{return (_Ptr); }
	protected:
		_Nodeptr _Ptr;
		};

		// CLASS const_iterator
	class const_iterator;
	friend class const_iterator;
	class const_iterator : public _Bidit<value_type, _Dift,
		_Ctptr, const_reference> {
	public:
		typedef _Bidit<value_type, _Dift,
			_Ctptr, const_reference> _Mybase;
		typedef typename _Mybase::iterator_category
			iterator_category;
//		typedef typename _Mybase::value_type value_type;
		typedef typename _Mybase::difference_type
			difference_type;
		typedef typename _Mybase::pointer pointer;
		typedef typename _Mybase::reference reference;
		const_iterator()
			: _Ptr(0) {}
		const_iterator(_Nodeptr _P)
			: _Ptr(_P) {}
		const_iterator(const iterator& _X)
			: _Ptr(_X._Mynode()) {}
		const_reference operator*() const
			{return (_Value(_Ptr)); }
		_Ctptr operator->() const
			{return (&**this); }
		const_iterator& operator++()
			{_Inc();
			return (*this); }
		const_iterator operator++(int)
			{const_iterator _Tmp = *this;
			++*this;
			return (_Tmp); }
		const_iterator& operator--()
			{_Dec();
			return (*this); }
		const_iterator operator--(int)
			{const_iterator _Tmp = *this;
			--*this;
			return (_Tmp); }
		bool operator==(const const_iterator& _X) const
			{return (_Ptr == _X._Ptr); }
		bool operator!=(const const_iterator& _X) const
			{return (!(*this == _X)); }
		void _Dec()
			{if (_Isnil(_Ptr))
				_Ptr = _Right(_Ptr);
			else if (!_Isnil(_Left(_Ptr)))
				_Ptr = _Max(_Left(_Ptr));
			else
				{_Nodeptr _P;
				while (!_Isnil(_P = _Parent(_Ptr))
					&& _Ptr == _Left(_P))
					_Ptr = _P;
				if (!_Isnil(_P))
					_Ptr = _P; }}
		void _Inc()
			{if (_Isnil(_Ptr))
				;
			else if (!_Isnil(_Right(_Ptr)))
				_Ptr = _Min(_Right(_Ptr));
			else
				{_Nodeptr _P;
				while (!_Isnil(_P = _Parent(_Ptr))
					&& _Ptr == _Right(_P))
					_Ptr = _P;
				_Ptr = _P; }}
		_Nodeptr _Mynode() const
			{return (_Ptr); }
	protected:
		_Nodeptr _Ptr;
		};

	typedef _Revbidit<iterator> reverse_iterator;
	typedef _Revbidit<const_iterator> const_reverse_iterator;
	typedef pair<iterator, bool> _Pairib;
	typedef pair<iterator, iterator> _Pairii;
	typedef pair<const_iterator, const_iterator> _Paircc;

	explicit _Tree(const key_compare& _Parg,
		const allocator_type& _Al)
		: _Mybase(_Parg, _Al)
		{_Init(); }
	_Tree(const value_type *_F, const value_type *_L,
		const key_compare& _Parg, const allocator_type& _Al)
		: _Mybase(_Parg, _Al)
		{_Init();
		insert(_F, _L); }
	_Tree(const _Myt& _X)
		: _Mybase(_X.key_comp(), _X.get_allocator())
		{_Init();
		_Copy(_X); }
	~_Tree()
		{erase(begin(), end());
		_Freenode(_Head);
		_Head = 0, _Size = 0; }
	_Myt& operator=(const _Myt& _X)
		{if (this != &_X)
			{erase(begin(), end());
			comp = _X.comp;
			_Copy(_X); }
		return (*this); }
	iterator begin()
		{return (iterator(_Lmost())); }
	const_iterator begin() const
		{return (const_iterator(_Lmost())); }
	iterator end()
		{return (iterator(_Head)); }
	const_iterator end() const
		{return (const_iterator(_Head)); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	size_type size() const
		{return (_Size); }
	size_type max_size() const
		{return (_Alval.max_size()); }
	bool empty() const
		{return (size() == 0); }
	allocator_type get_allocator() const
		{return (_Alval); }
	key_compare key_comp() const
		{return (comp); }
	value_compare value_comp() const
		{return (value_compare(key_comp())); }
	_Pairib insert(const value_type& _V)
		{_Nodeptr _X = _Root();
		_Nodeptr _Y = _Head;
		bool _Addleft = true;
		while (!_Isnil(_X))
			{_Y = _X;
			_Addleft = comp(_Kfn()(_V), _Key(_X));
			_X = _Addleft ? _Left(_X) : _Right(_X); }
		if (_Multi)
			return (_Pairib(_Insert(_Addleft, _Y, _V), true));
		else
			{iterator _P = iterator(_Y);
			if (!_Addleft)
				;
			else if (_P == begin())
				return (_Pairib(_Insert(true, _Y, _V), true));
			else
				--_P;
			if (comp(_Key(_P._Mynode()), _Kfn()(_V)))
				return (_Pairib(_Insert(_Addleft, _Y, _V), true));
			else
				return (_Pairib(_P, false)); }}
	iterator insert(iterator _P, const value_type& _V)
		{if (size() == 0)
			return (_Insert(true, _Head, _V));
		else if (_P == begin())
			{if (comp(_Kfn()(_V), _Key(_P._Mynode())))
				return (_Insert(true, _P._Mynode(), _V)); }
		else if (_P == end())
			{if (comp(_Key(_Rmost()), _Kfn()(_V)))
				return (_Insert(false, _Rmost(), _V)); }
		else
			{iterator _Pb = _P;
			if (comp(_Key((--_Pb)._Mynode()), _Kfn()(_V))
				&& comp(_Kfn()(_V), _Key(_P._Mynode())))
				if (_Isnil(_Right(_Pb._Mynode())))
					return (_Insert(false, _Pb._Mynode(), _V));
				else
					return (_Insert(true, _P._Mynode(), _V)); }
		return (insert(_V).first); }
	template<class _It>
		void insert(_It _F, _It _L)
		{for (; _F != _L; ++_F)
			insert(*_F); }
	iterator erase(iterator _P)
		{if (_Isnil(_P._Mynode()))
			_THROW(out_of_range, "invalid map/set<T> iterator");
		_Nodeptr _X, _Xpar;
		_Nodeptr _Y = (_P++)._Mynode();
		_Nodeptr _Z = _Y;
		if (_Isnil(_Left(_Y)))
			_X = _Right(_Y);
		else if (_Isnil(_Right(_Y)))
			_X = _Left(_Y);
		else
			_Y = _Min(_Right(_Y)), _X = _Right(_Y);
		if (_Y == _Z)
			{_Xpar = _Parent(_Z);
			if (!_Isnil(_X))
				_Parent(_X) = _Xpar;
			if (_Root() == _Z)
				_Root() = _X;
			else if (_Left(_Xpar) == _Z)
				_Left(_Xpar) = _X;
			else
				_Right(_Xpar) = _X;
			if (_Lmost() != _Z)
				;
			else if (_Isnil(_Right(_Z)))
				_Lmost() = _Xpar;
			else
				_Lmost() = _Min(_X);
			if (_Rmost() != _Z)
				;
			else if (_Isnil(_Left(_Z)))
				_Rmost() = _Xpar;
			else
				_Rmost() = _Max(_X); }
		else
			{_Parent(_Left(_Z)) = _Y;
			_Left(_Y) = _Left(_Z);
			if (_Y == _Right(_Z))
				_Xpar = _Y;
			else
				{_Xpar = _Parent(_Y);
				if (!_Isnil(_X))
					_Parent(_X) = _Xpar;
				_Left(_Xpar) = _X;
				_Right(_Y) = _Right(_Z);
				_Parent(_Right(_Z)) = _Y; }
			if (_Root() == _Z)
				_Root() = _Y;
			else if (_Left(_Parent(_Z)) == _Z)
				_Left(_Parent(_Z)) = _Y;
			else
				_Right(_Parent(_Z)) = _Y;
			_Parent(_Y) = _Parent(_Z);
			std::swap(_Color(_Y), _Color(_Z)); }
		if (_Color(_Z) == _Black)
			{for (; _X != _Root() && _Color(_X) == _Black;
				_Xpar = _Parent(_X))
				if (_X == _Left(_Xpar))
					{_Nodeptr _W = _Right(_Xpar);
					if (_Color(_W) == _Red)
						{_Color(_W) = _Black;
						_Color(_Xpar) = _Red;
						_Lrotate(_Xpar);
						_W = _Right(_Xpar); }
					if (_Isnil(_W))
						_X = _Xpar;	// shouldn't happen
					else if (_Color(_Left(_W)) == _Black
						&& _Color(_Right(_W)) == _Black)
						{_Color(_W) = _Red;
						_X = _Xpar; }
					else
						{if (_Color(_Right(_W)) == _Black)
							{_Color(_Left(_W)) = _Black;
							_Color(_W) = _Red;
							_Rrotate(_W);
							_W = _Right(_Xpar); }
						_Color(_W) = _Color(_Xpar);
						_Color(_Xpar) = _Black;
						_Color(_Right(_W)) = _Black;
						_Lrotate(_Xpar);
						break; }}
				else
					{_Nodeptr _W = _Left(_Xpar);
					if (_Color(_W) == _Red)
						{_Color(_W) = _Black;
						_Color(_Xpar) = _Red;
						_Rrotate(_Xpar);
						_W = _Left(_Xpar); }
					if (_Isnil(_W))
						_X = _Xpar;	// shouldn't happen
					else if (_Color(_Right(_W)) == _Black
						&& _Color(_Left(_W)) == _Black)
						{_Color(_W) = _Red;
						_X = _Xpar; }
					else
						{if (_Color(_Left(_W)) == _Black)
							{_Color(_Right(_W)) = _Black;
							_Color(_W) = _Red;
							_Lrotate(_W);
							_W = _Left(_Xpar); }
						_Color(_W) = _Color(_Xpar);
						_Color(_Xpar) = _Black;
						_Color(_Left(_W)) = _Black;
						_Rrotate(_Xpar);
						break; }}
			_Color(_X) = _Black; }
		_Destval(&_Value(_Z));
		_Freenode(_Z);
		if (0 < _Size)
			--_Size;
		return (_P); }
	iterator erase(iterator _F, iterator _L)
		{if (size() == 0 || _F != begin() || _L != end())
			{while (_F != _L)
				erase(_F++);
			return (_F); }
		else
			{_Erase(_Root());
			_Root() = _Head, _Size = 0;
			_Lmost() = _Head, _Rmost() = _Head;
			return (begin()); }}
	size_type erase(const key_type& _X)
		{_Pairii _P = equal_range(_X);
		size_type _N = 0;
		_Distance(_P.first, _P.second, _N);
		erase(_P.first, _P.second);
		return (_N); }
	void erase(const key_type *_F, const key_type *_L)
		{while (_F != _L)
			erase(*_F++); }
	void clear()
		{erase(begin(), end()); }
	iterator find(const key_type& _Kv)
		{iterator _P = lower_bound(_Kv);
		return (_P == end()
			|| comp(_Kv, _Key(_P._Mynode()))
				? end() : _P); }
	const_iterator find(const key_type& _Kv) const
		{const_iterator _P = lower_bound(_Kv);
		return (_P == end()
			|| comp(_Kv, _Key(_P._Mynode()))
				? end() : _P); }
	size_type count(const key_type& _Kv) const
		{_Paircc _Ans = equal_range(_Kv);
		size_type _N = 0;
		_Distance(_Ans.first, _Ans.second, _N);
		return (_N); }
	iterator lower_bound(const key_type& _Kv)
		{return (iterator(_Lbound(_Kv))); }
	const_iterator lower_bound(const key_type& _Kv) const
		{return (const_iterator(_Lbound(_Kv))); }
	iterator upper_bound(const key_type& _Kv)
		{return (iterator(_Ubound(_Kv))); }
	const_iterator upper_bound(const key_type& _Kv) const
		{return (iterator(_Ubound(_Kv))); }
	_Pairii equal_range(const key_type& _Kv)
		{return (_Pairii(lower_bound(_Kv), upper_bound(_Kv))); }
	_Paircc equal_range(const key_type& _Kv) const
		{return (_Paircc(lower_bound(_Kv), upper_bound(_Kv))); }
	void swap(_Myt& _X)
		{if (get_allocator() == _X.get_allocator())
			{std::swap(comp, _X.comp);
			std::swap(_Head, _X._Head);
			std::swap(_Size, _X._Size); }
		else
			{_Myt _Ts = *this; *this = _X, _X = _Ts; }}
	friend void swap(_Myt& _X, _Myt& _Y)
		{_X.swap(_Y); }
protected:
	void _Copy(const _Myt& _X)
		{_Root() = _Copy(_X._Root(), _Head);
		_Size = _X.size();
		if (!_Isnil(_Root()))
			{_Lmost() = _Min(_Root());
			_Rmost() = _Max(_Root()); }
		else
			_Lmost() = _Head, _Rmost() = _Head; }
	_Nodeptr _Copy(_Nodeptr _X, _Nodeptr _P)
		{_Nodeptr _R = _Head;
		if (!_Isnil(_X))
			{_Nodeptr _Y = _Buynode(_P, _Color(_X));
			_TRY_BEGIN
			_Consval(&_Value(_Y), _Value(_X));
			_CATCH_ALL
			_Freenode(_Y);
			_Erase(_R);
			_RERAISE;
			_CATCH_END
			_Left(_Y) = _Head, _Right(_Y) = _Head;
			if (_Isnil(_R))
				_R = _Y;
			_TRY_BEGIN
			_Left(_Y) = _Copy(_Left(_X), _Y);
			_Right(_Y) = _Copy(_Right(_X), _Y);
			_CATCH_ALL
			_Erase(_R);
			_RERAISE;
			_CATCH_END }
		return (_R); }
	void _Erase(_Nodeptr _X)
		{for (_Nodeptr _Y = _X; !_Isnil(_Y); _X = _Y)
			{_Erase(_Right(_Y));
			_Y = _Left(_Y);
			_Destval(&_Value(_X));
			_Freenode(_X); }}
	void _Init()
		{_Head = _Buynode(0, _Black);
		_Isnil(_Head) = true;
		_Root() = _Head;
		_Lmost() = _Head, _Rmost() = _Head;
		_Size = 0; }
	iterator _Insert(bool _Addleft, _Nodeptr _Y,
		const value_type& _V)
		{if (max_size() - 1 <= _Size)
			_THROW(length_error, "map/set<T> too long");
		_Nodeptr _Z = _Buynode(_Y, _Red);
		_Left(_Z) = _Head, _Right(_Z) = _Head;
		_TRY_BEGIN
		_Consval(&_Value(_Z), _V);
		_CATCH_ALL
		_Freenode(_Z);
		_RERAISE;
		_CATCH_END
		++_Size;
		if (_Y == _Head)
			{_Root() = _Z;
			_Lmost() = _Z, _Rmost() = _Z; }
		else if (_Addleft)
			{_Left(_Y) = _Z;
			if (_Y == _Lmost())
				_Lmost() = _Z; }
		else
			{_Right(_Y) = _Z;
			if (_Y == _Rmost())
				_Rmost() = _Z; }
		for (_Nodeptr _X = _Z; _Color(_Parent(_X)) == _Red; )
			if (_Parent(_X) == _Left(_Parent(_Parent(_X))))
				{_Y = _Right(_Parent(_Parent(_X)));
				if (_Color(_Y) == _Red)
					{_Color(_Parent(_X)) = _Black;
					_Color(_Y) = _Black;
					_Color(_Parent(_Parent(_X))) = _Red;
					_X = _Parent(_Parent(_X)); }
				else
					{if (_X == _Right(_Parent(_X)))
						{_X = _Parent(_X);
						_Lrotate(_X); }
					_Color(_Parent(_X)) = _Black;
					_Color(_Parent(_Parent(_X))) = _Red;
					_Rrotate(_Parent(_Parent(_X))); }}
			else
				{_Y = _Left(_Parent(_Parent(_X)));
				if (_Color(_Y) == _Red)
					{_Color(_Parent(_X)) = _Black;
					_Color(_Y) = _Black;
					_Color(_Parent(_Parent(_X))) = _Red;
					_X = _Parent(_Parent(_X)); }
				else
					{if (_X == _Left(_Parent(_X)))
						{_X = _Parent(_X);
						_Rrotate(_X); }
					_Color(_Parent(_X)) = _Black;
					_Color(_Parent(_Parent(_X))) = _Red;
					_Lrotate(_Parent(_Parent(_X))); }}
		_Color(_Root()) = _Black;
		return (iterator(_Z)); }
	_Nodeptr _Lbound(const key_type& _Kv) const
		{_Nodeptr _X = _Root();
		_Nodeptr _Y = _Head;
		while (!_Isnil(_X))
			if (comp(_Key(_X), _Kv))
				_X = _Right(_X);
			else
				_Y = _X, _X = _Left(_X);
		return (_Y); }
	_Nodeptr& _Lmost()
		{return (_Left(_Head)); }
	_Nodeptr& _Lmost() const
		{return (_Left(_Head)); }
	void _Lrotate(_Nodeptr _X)
		{_Nodeptr _Y = _Right(_X);
		_Right(_X) = _Left(_Y);
		if (!_Isnil(_Left(_Y)))
			_Parent(_Left(_Y)) = _X;
		_Parent(_Y) = _Parent(_X);
		if (_X == _Root())
			_Root() = _Y;
		else if (_X == _Left(_Parent(_X)))
			_Left(_Parent(_X)) = _Y;
		else
			_Right(_Parent(_X)) = _Y;
		_Left(_Y) = _X;
		_Parent(_X) = _Y; }
	static _Nodeptr _Max(_Nodeptr _P)
		{while (!_Isnil(_Right(_P)))
			_P = _Right(_P);
		return (_P); }
	static _Nodeptr _Min(_Nodeptr _P)
		{while (!_Isnil(_Left(_P)))
			_P = _Left(_P);
		return (_P); }
	_Nodeptr& _Rmost()
		{return (_Right(_Head)); }
	_Nodeptr& _Rmost() const
		{return (_Right(_Head)); }
	_Nodeptr& _Root()
		{return (_Parent(_Head)); }
	_Nodeptr& _Root() const
		{return (_Parent(_Head)); }
	void _Rrotate(_Nodeptr _X)
		{_Nodeptr _Y = _Left(_X);
		_Left(_X) = _Right(_Y);
		if (!_Isnil(_Right(_Y)))
			_Parent(_Right(_Y)) = _X;
		_Parent(_Y) = _Parent(_X);
		if (_X == _Root())
			_Root() = _Y;
		else if (_X == _Right(_Parent(_X)))
			_Right(_Parent(_X)) = _Y;
		else
			_Left(_Parent(_X)) = _Y;
		_Right(_Y) = _X;
		_Parent(_X) = _Y; }
	_Nodeptr _Ubound(const key_type& _Kv) const
		{_Nodeptr _X = _Root();
		_Nodeptr _Y = _Head;
		while (!_Isnil(_X))
			if (comp(_Kv, _Key(_X)))
				_Y = _X, _X = _Left(_X);
			else
				_X = _Right(_X);
		return (_Y); }
	_Nodeptr _Buynode(_Nodeptr _Parg, char _Carg)
		{_Nodeptr _S = (_Nodeptr)_Alval._Charalloc(
			1 * sizeof (_Node));
		_Parent(_S) = _Parg;
		_Color(_S) = _Carg;
		_Isnil(_S) = false;
		return (_S); }
	void _Consval(_Tptr _P, const value_type& _V)
		{_Construct(&*_P, _V); }
	void _Destval(_Tptr _P)
		{_Destroy(&*_P); }
	void _Freenode(_Nodeptr _S)
		{_Alval.deallocate(_S, 1); }
	_Nodeptr _Head;
	size_type _Size;
	};

		// _Tree TEMPLATE OPERATORS
template<class _Tr> inline
	bool operator==(const _Tree<_Tr>& _X, const _Tree<_Tr>& _Y)
	{return (_X.size() == _Y.size()
		&& equal(_X.begin(), _X.end(), _Y.begin())); }
template<class _Tr> inline
	bool operator!=(const _Tree<_Tr>& _X, const _Tree<_Tr>& _Y)
	{return (!(_X == _Y)); }
template<class _Tr> inline
	bool operator<(const _Tree<_Tr>& _X, const _Tree<_Tr>& _Y)
	{return (lexicographical_compare(_X.begin(), _X.end(),
		_Y.begin(), _Y.end(), _X.value_comp())); }
template<class _Tr> inline
	bool operator>(const _Tree<_Tr>& _X, const _Tree<_Tr>& _Y)
	{return (_Y < _X); }
template<class _Tr> inline
	bool operator<=(const _Tree<_Tr>& _X, const _Tree<_Tr>& _Y)
	{return (!(_Y < _X)); }
template<class _Tr> inline
	bool operator>=(const _Tree<_Tr>& _X, const _Tree<_Tr>& _Y)
	{return (!(_X < _Y)); }
_STD_END
 #if 1200 <= _MSC_VER
 #pragma warning(default:4127 4284)
 #endif
#if 1200 <= _MSC_VER
#pragma warning(pop)
#endif
#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif /* _XTREE_ */

/*
 * Copyright (c) 1995-1999 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
 V2.33:099I */
