// list standard header

#if 1000 < _MSC_VER /*IFSTRIP=IGN*/
#pragma once
#endif

#ifndef _LIST_
#define _LIST_
#include <functional>
#include <memory>
#include <stdexcept>

#ifdef  _MSC_VER
#pragma pack(push,8)
#endif  /* _MSC_VER */
#if 1200 <= _MSC_VER
#pragma warning(push,3)
#endif
 #pragma warning(disable:4284)
_STD_BEGIN

		// TEMPLATE CLASS _List_val
template<class _Ty, class _A>
	class _List_val {
protected:
	_List_val(_A _Al = _A())
		: _Alval(_Al) {}
	typedef _A _Alty;
	_Alty _Alval;
	};

		// TEMPLATE CLASS list
template<class _Ty, class _Ax = allocator<_Ty> >
	class list : public _List_val<_Ty, _Ax> {
public:
	typedef list<_Ty, _Ax> _Myt;
	typedef _List_val<_Ty, _Ax> _Mybase;
	typedef typename _Mybase::_Alty _A;
protected:
	typedef _POINTER_X(void, _A) _Genptr;
	struct _Node;
	friend struct _Node;
	struct _Node {
		_Genptr _Next, _Prev;
		_Ty _Value;
		};
	typedef _POINTER_X(_Node, _A) _Nodeptr;
	struct _Acc;
	friend struct _Acc;
	struct _Acc {
		typedef _REFERENCE_X(_Nodeptr, _A) _Nodepref;
		typedef typename _A::reference _Vref;
		static _Nodepref _Next(_Nodeptr _P)
			{return ((_Nodepref)(*_P)._Next); }
		static _Nodepref _Prev(_Nodeptr _P)
			{return ((_Nodepref)(*_P)._Prev); }
		static _Vref _Value(_Nodeptr _P)
			{return ((_Vref)(*_P)._Value); }
		};
public:
	typedef _A allocator_type;
	typedef typename _A::size_type size_type;
	typedef typename _A::difference_type _Dift;
	typedef _Dift difference_type;
	typedef typename _A::pointer _Tptr;
	typedef typename _A::const_pointer _Ctptr;
	typedef _Tptr pointer;
	typedef _Ctptr const_pointer;
	typedef typename _A::reference _Reft;
	typedef _Reft reference;
	typedef typename _A::const_reference const_reference;
	typedef typename _A::value_type value_type;

		// CLASS iterator
	class iterator;
	friend class iterator;
	class iterator : public _Bidit<_Ty, _Dift, _Tptr, _Reft> {
	public:
		typedef _Bidit<_Ty, _Dift, _Tptr, _Reft> _Mybase;
		typedef typename _Mybase::iterator_category
			iterator_category;
		typedef typename _Mybase::value_type value_type;
		typedef typename _Mybase::difference_type
			difference_type;
		typedef typename _Mybase::pointer pointer;
		typedef typename _Mybase::reference reference;
		iterator()
			: _Ptr(0) {}
		iterator(_Nodeptr _P)
			: _Ptr(_P) {}
		reference operator*() const
			{return (_Acc::_Value(_Ptr)); }
		_Tptr operator->() const
			{return (&**this); }
		iterator& operator++()
			{_Ptr = _Acc::_Next(_Ptr);
			return (*this); }
		iterator operator++(int)
			{iterator _Tmp = *this;
			++*this;
			return (_Tmp); }
		iterator& operator--()
			{_Ptr = _Acc::_Prev(_Ptr);
			return (*this); }
		iterator operator--(int)
			{iterator _Tmp = *this;
			--*this;
			return (_Tmp); }
		bool operator==(const iterator& _X) const
			{return (_Ptr == _X._Ptr); }
		bool operator!=(const iterator& _X) const
			{return (!(*this == _X)); }
		_Nodeptr _Mynode() const
			{return (_Ptr); }
 #if _MSC_VER < 1200
		bool operator<(const iterator& _X) const
			{return (_Ptr != _X._Ptr); }	// kludge
 #endif
	protected:
		_Nodeptr _Ptr;
		};

		// CLASS const_iterator
	class const_iterator;
	friend class const_iterator;
	class const_iterator
		: public _Bidit<_Ty, _Dift, _Ctptr, const_reference> {
	public:
		typedef _Bidit<_Ty, _Dift, _Ctptr, const_reference>
			_Mybase;
		typedef typename _Mybase::iterator_category
			iterator_category;
		typedef typename _Mybase::value_type value_type;
		typedef typename _Mybase::difference_type
			difference_type;
		typedef typename _Mybase::pointer pointer;
		typedef typename _Mybase::reference reference;
		const_iterator()
			: _Ptr(0) {}
		const_iterator(_Nodeptr _P)
			: _Ptr(_P) {}
		const_iterator(const iterator& _X)
			: _Ptr(_X._Mynode()) {}
		const_reference operator*() const
			{return (_Acc::_Value(_Ptr)); }
		_Ctptr operator->() const
			{return (&**this); }
		const_iterator& operator++()
			{_Ptr = _Acc::_Next(_Ptr);
			return (*this); }
		const_iterator operator++(int)
			{const_iterator _Tmp = *this;
			++*this;
			return (_Tmp); }
		const_iterator& operator--()
			{_Ptr = _Acc::_Prev(_Ptr);
			return (*this); }
		const_iterator operator--(int)
			{const_iterator _Tmp = *this;
			--*this;
			return (_Tmp); }
		bool operator==(const const_iterator& _X) const
			{return (_Ptr == _X._Ptr); }
		bool operator!=(const const_iterator& _X) const
			{return (!(*this == _X)); }
		_Nodeptr _Mynode() const
			{return (_Ptr); }
 #if _MSC_VER < 1200
		bool operator<(const const_iterator& _X) const
			{return (_Ptr != _X._Ptr); }	// kludge
 #endif
	protected:
		_Nodeptr _Ptr;
		};

	typedef _Revbidit<iterator> reverse_iterator;
	typedef _Revbidit<const_iterator> const_reverse_iterator;

	list()
		: _Mybase(), _Head(_Buynode()), _Size(0)
		{}
	explicit list(const _A& _Al)
		: _Mybase(_Al), _Head(_Buynode()), _Size(0)
		{}
	explicit list(size_type _N)
		: _Mybase(), _Head(_Buynode()), _Size(0)
		{insert(begin(), _N, _Ty()); }
	list(size_type _N, const _Ty& _V)
		: _Mybase(), _Head(_Buynode()), _Size(0)
		{insert(begin(), _N, _V); }
	list(size_type _N, const _Ty& _V, const _A& _Al)
		: _Mybase(_Al), _Head(_Buynode()), _Size(0)
		{insert(begin(), _N, _V); }
	list(const _Myt& _X)
		: _Mybase(_X._Alval),
			_Head(_Buynode()), _Size(0)
		{insert(begin(), _X.begin(), _X.end()); }
	template<class _It>
		list(_It _F, _It _L)
		: _Mybase(), _Head(_Buynode()), _Size(0)
		{_Construct(_F, _L, _Iter_cat(_F)); }
	template<class _It>
		list(_It _F, _It _L, const _A& _Al)
		: _Mybase(_Al), _Head(_Buynode()), _Size(0)
		{_Construct(_F, _L, _Iter_cat(_F)); }
	template<class _It>
		void _Construct(_It _F, _It _L, _Int_iterator_tag)
		{insert(begin(), (size_type)_F, (_Ty)_L); }
	template<class _It>
		void _Construct(_It _F, _It _L, input_iterator_tag)
		{insert(begin(), _F, _L); }
	~list()
		{erase(begin(), end());
		_Freenode(_Head);
		_Head = 0, _Size = 0; }
	_Myt& operator=(const _Myt& _X)
		{if (this != &_X)
			assign(_X.begin(), _X.end());
		return (*this); }
	iterator begin()
		{return (iterator(_Head == 0 ? 0
			: _Acc::_Next(_Head))); }
	const_iterator begin() const
		{return (const_iterator(_Head == 0 ? 0
			: _Acc::_Next(_Head))); }
	iterator end()
		{return (iterator(_Head)); }
	const_iterator end() const
		{return (const_iterator(_Head)); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	void resize(size_type _N)
		{resize(_N, _Ty()); }
	void resize(size_type _N, _Ty _X)
		{if (size() < _N)
			insert(end(), _N - size(), _X);
		else
			while (_N < size())
				pop_back(); }
	size_type size() const
		{return (_Size); }
	size_type max_size() const
		{return (_Mybase::_Alval.max_size()); }
	bool empty() const
		{return (size() == 0); }
	allocator_type get_allocator() const
		{return (_Mybase::_Alval); }
	reference front()
		{return (*begin()); }
	const_reference front() const
		{return (*begin()); }
	reference back()
		{return (*(--end())); }
	const_reference back() const
		{return (*(--end())); }
	void push_front(const _Ty& _X)
		{_Insert(begin(), _X); }
	void pop_front()
		{erase(begin()); }
	void push_back(const _Ty& _X)
		{_Insert(end(), _X); }
	void pop_back()
		{erase(--end()); }
	template<class _It>
		void assign(_It _F, _It _L)
		{_Assign(_F, _L, _Iter_cat(_F)); }
	template<class _It>
		void _Assign(_It _F, _It _L, _Int_iterator_tag)
		{assign((size_type)_F, (_Ty)_L); }
	template<class _It>
		void _Assign(_It _F, _It _L, input_iterator_tag)
		{erase(begin(), end());
		insert(begin(), _F, _L); }
	void assign(size_type _N, const _Ty& _X)
		{_Ty _Tx = _X;
		erase(begin(), end());
		insert(begin(), _N, _Tx); }
	iterator insert(iterator _P, const _Ty& _X)
		{_Insert(_P, _X);
		return (--_P); }
	void _Insert(iterator _P, const _Ty& _X)
		{_Nodeptr _S = _P._Mynode();
		_Nodeptr _Snew = _Buynode(_S, _Acc::_Prev(_S));
		_Incsize(1);
		_TRY_BEGIN
		_Mybase::_Alval.construct(&_Acc::_Value(_Snew), _X);
		_CATCH_ALL
		--_Size;
		_Freenode(_Snew);
		_RERAISE;
		_CATCH_END
		_Acc::_Prev(_S) = _Snew;
		_Acc::_Next(_Acc::_Prev(_Snew)) = _Snew; }
	void insert(iterator _P, size_type _M, const _Ty& _X)
		{size_type _N = _M;
		_TRY_BEGIN
		for (; 0 < _M; --_M)
			_Insert(_P, _X);
		_CATCH_ALL
		for (; _M < _N; ++_M)
			{iterator _Pm = _P;
			erase(--_Pm); }
		_RERAISE;
		_CATCH_END }
	template<class _It>
		void insert(iterator _P, _It _F, _It _L)
		{_Insert(_P, _F, _L, _Iter_cat(_F)); }
	template<class _It>
		void _Insert(iterator _P, _It _F, _It _L,
			_Int_iterator_tag)
		{insert(_P, (size_type)_F, (_Ty)_L); }
	template<class _It>
		void _Insert(iterator _P, _It _F, _It _L,
			input_iterator_tag)
		{size_type _N = 0;
		_TRY_BEGIN
		for (; _F != _L; ++_F, ++_N)
			_Insert(_P, *_F);
		_CATCH_ALL
		for (; 0 < _N; --_N)
			{iterator _Pm = _P;
			erase(--_Pm); }
		_RERAISE;
		_CATCH_END }
	template<class _It>
		void _Insert(iterator _P, _It _F, _It _L,
			forward_iterator_tag)
		{_It _Fs = _F;
		_TRY_BEGIN
		for (; _F != _L; ++_F)
			_Insert(_P, *_F);
		_CATCH_ALL
		for (; _Fs != _F; ++_Fs)
			{iterator _Pm = _P;
			erase(--_Pm); }
		_RERAISE;
		_CATCH_END }
	iterator erase(iterator _P)
		{_Nodeptr _S = (_P++)._Mynode();
		_Acc::_Next(_Acc::_Prev(_S)) = _Acc::_Next(_S);
		_Acc::_Prev(_Acc::_Next(_S)) = _Acc::_Prev(_S);
		_Mybase::_Alval.destroy(&_Acc::_Value(_S));
		_Freenode(_S);
		--_Size;
		return (_P); }
	iterator erase(iterator _F, iterator _L)
		{while (_F != _L)
			erase(_F++);
		return (_F); }
	void clear()
		{erase(begin(), end()); }
	void swap(_Myt& _X)
		{if (_Mybase::_Alval == _X._Alval)
			{std::swap(_Head, _X._Head);
			std::swap(_Size, _X._Size); }
		else
			{iterator _P = begin();
			splice(_P, _X);
			_X.splice(_X.begin(), *this, _P, end()); }}
	friend void swap(_Myt& _X, _Myt& _Y)
		{_X.swap(_Y); }
	void splice(iterator _P, _Myt& _X)
		{if (this != &_X && !_X.empty())
			{_Splice(_P, _X, _X.begin(), _X.end(), _X._Size); }}
	void splice(iterator _P, _Myt& _X, iterator _F)
		{iterator _L = _F;
		if (_F != _X.end() && _P != _F && _P != ++_L)
			{_Splice(_P, _X, _F, _L, 1); }}
	void splice(iterator _P, _Myt& _X, iterator _F, iterator _L)
		{if (_F != _L && _P != _L)
			{size_type _N = 0;
			for (iterator _Fs = _F; _Fs != _L; ++_Fs, ++_N)
				if (_Fs == _P)
					return;	// else granny knot
			_Splice(_P, _X, _F, _L, _N); }}
	void remove(const _Ty& _V)
		{iterator _L = end();
		for (iterator _F = begin(); _F != _L; )
			if (*_F == _V)
				erase(_F++);
			else
				++_F; }
	template<class _Pr1>
		void remove_if(_Pr1 _Pr)
		{iterator _L = end();
		for (iterator _F = begin(); _F != _L; )
			if (_Pr(*_F))
				erase(_F++);
			else
				++_F; }
	void unique()
		{iterator _F = begin(), _L = end();
		if (_F != _L)
			for (iterator _M = _F; ++_M != _L; _M = _F)
				if (*_F == *_M)
					erase(_M);
				else
					_F = _M; }
	template<class _Pr2>
		void unique(_Pr2 _Pr)
		{iterator _F = begin(), _L = end();
		if (_F != _L)
			for (iterator _M = _F; ++_M != _L; _M = _F)
				if (_Pr(*_F, *_M))
					erase(_M);
				else
					_F = _M; }
	void merge(_Myt& _X)
		{if (&_X != this)
			{iterator _F1 = begin(), _L1 = end();
			iterator _F2 = _X.begin(), _L2 = _X.end();
			while (_F1 != _L1 && _F2 != _L2)
				if (*_F2 < *_F1)
					{iterator _Mid2 = _F2;
					_Splice(_F1, _X, _F2, ++_Mid2, 1);
					_F2 = _Mid2; }
				else
					++_F1;
			if (_F2 != _L2)
				_Splice(_L1, _X, _F2, _L2, _X._Size); }}
	template<class _Pr3>
		void merge(_Myt& _X, _Pr3 _Pr)
		{if (&_X != this)
			{iterator _F1 = begin(), _L1 = end();
			iterator _F2 = _X.begin(), _L2 = _X.end();
			while (_F1 != _L1 && _F2 != _L2)
				if (_Pr(*_F2, *_F1))
					{iterator _Mid2 = _F2;
					_Splice(_F1, _X, _F2, ++_Mid2, 1);
					_F2 = _Mid2; }
				else
					++_F1;
			if (_F2 != _L2)
				_Splice(_L1, _X, _F2, _L2, _X._Size); }}
	void sort()
		{if (2 <= size())
			{const size_t _MAXN = 25;
			_Myt _X(_Mybase::_Alval), _Arr[_MAXN + 1];
			size_t _N = 0;
			while (!empty())
				{_X.splice(_X.begin(), *this, begin());
				size_t _I;
				for (_I = 0; _I < _N && !_Arr[_I].empty(); ++_I)
					{_Arr[_I].merge(_X);
					_Arr[_I].swap(_X); }
				if (_I == _MAXN)
					_Arr[_I - 1].merge(_X);
				else
					{_Arr[_I].swap(_X);
					if (_I == _N)
						++_N; }}
			for (size_t _I = 1; _I < _N; ++_I)
				_Arr[_I].merge(_Arr[_I - 1]);
			swap(_Arr[_N - 1]); }}
	template<class _Pr3>
		void sort(_Pr3 _Pr)
		{if (2 <= size())
			{const size_t _MAXN = 25;
			_Myt _X(_Mybase::_Alval), _Arr[_MAXN + 1];
			size_t _N = 0;
			while (!empty())
				{_X.splice(_X.begin(), *this, begin());
				size_t _I;
				for (_I = 0; _I < _N && !_Arr[_I].empty(); ++_I)
					{_Arr[_I].merge(_X, _Pr);
					_Arr[_I].swap(_X); }
				if (_I == _MAXN)
					_Arr[_I - 1].merge(_X, _Pr);
				else
					{_Arr[_I].swap(_X);
					if (_I == _N)
						++_N; }}
			for (size_t _I = 1; _I < _N; ++_I)
				_Arr[_I].merge(_Arr[_I - 1], _Pr);
			swap(_Arr[_N - 1]); }}
	void reverse()
		{if (2 <= size())
			{iterator _L = end();
			for (iterator _F = ++begin(); _F != _L; )
				{iterator _M = _F;
				_Splice(begin(), *this, _M, ++_F, 1); }}}
protected:
	_Nodeptr _Buynode(_Nodeptr _Narg = 0, _Nodeptr _Parg = 0)
		{_Nodeptr _S = (_Nodeptr)_Alval._Charalloc(
			1 * sizeof (_Node));
		_Acc::_Next(_S) = _Narg != 0 ? _Narg : _S;
		_Acc::_Prev(_S) = _Parg != 0 ? _Parg : _S;
		return (_S); }
	void _Freenode(_Nodeptr _S)
		{_Alval.deallocate(_S, 1); }
	void _Splice(iterator _P, _Myt& _X, iterator _F, iterator _L,
		size_type _N)
		{if (_Mybase::_Alval == _X._Alval)
			{if (this != &_X)
				{_Incsize(_N);
				_X._Size -= _N; }
			_Acc::_Next(_Acc::_Prev(_F._Mynode())) =
				_L._Mynode();
			_Acc::_Next(_Acc::_Prev(_L._Mynode())) =
				_P._Mynode();
			_Acc::_Next(_Acc::_Prev(_P._Mynode())) =
				_F._Mynode();
			_Nodeptr _S = _Acc::_Prev(_P._Mynode());
			_Acc::_Prev(_P._Mynode()) =
				_Acc::_Prev(_L._Mynode());
			_Acc::_Prev(_L._Mynode()) =
				_Acc::_Prev(_F._Mynode());
			_Acc::_Prev(_F._Mynode()) = _S; }
		else
			{insert(_P, _F, _L);
			_X.erase(_F, _L); }}
	void _Incsize(size_type _N)
		{if (max_size() - size() < _N)
			_THROW(length_error, "list<T> too long");
		_Size += _N; }
	_Nodeptr _Head;
	size_type _Size;
	};

		// list TEMPLATE OPERATORS
template<class _Ty, class _A> inline
	bool operator==(const list<_Ty, _A>& _X,
		const list<_Ty, _A>& _Y)
	{return (_X.size() == _Y.size()
		&& equal(_X.begin(), _X.end(), _Y.begin())); }
template<class _Ty, class _A> inline
	bool operator!=(const list<_Ty, _A>& _X,
		const list<_Ty, _A>& _Y)
	{return (!(_X == _Y)); }
template<class _Ty, class _A> inline
	bool operator<(const list<_Ty, _A>& _X,
		const list<_Ty, _A>& _Y)
	{return (lexicographical_compare(_X.begin(), _X.end(),
		_Y.begin(), _Y.end())); }
template<class _Ty, class _A> inline
	bool operator>(const list<_Ty, _A>& _X,
		const list<_Ty, _A>& _Y)
	{return (_Y < _X); }
template<class _Ty, class _A> inline
	bool operator<=(const list<_Ty, _A>& _X,
		const list<_Ty, _A>& _Y)
	{return (!(_Y < _X)); }
template<class _Ty, class _A> inline
	bool operator>=(const list<_Ty, _A>& _X,
		const list<_Ty, _A>& _Y)
	{return (!(_X < _Y)); }
 #if 1200 <= _MSC_VER
 #pragma warning(default:4284)
 #endif
_STD_END
#if 1200 <= _MSC_VER
#pragma warning(pop)
#endif
#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif /* _LIST_ */

/*
 * Copyright (c) 1995-1999 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
 V2.33:099I */
