// sstream standard header

#if 1000 < _MSC_VER /*IFSTRIP=IGN*/
#pragma once
#endif

#ifndef _SSTREAM_
#define _SSTREAM_
#include <string>

#ifdef  _MSC_VER
#pragma pack(push,8)
#endif  /* _MSC_VER */
#if 1200 <= _MSC_VER
#pragma warning(push,3)
#endif
_STD_BEGIN
enum __Strstate {_Allocated = 1, _Constant = 2, _Noread = 4};
_BITMASK(__Strstate, _Strstate);
_BITMASK_OPS(__Strstate)

		// TEMPLATE CLASS basic_stringbuf
template<class _E, class _Tr, class _A>
	class basic_stringbuf : public basic_streambuf<_E, _Tr> {
public:
	typedef basic_streambuf<_E, _Tr> _Mysb;
	typedef basic_string<_E, _Tr, _A> _Mystr;
	explicit basic_stringbuf(
		ios_base::openmode _W = ios_base::in | ios_base::out)
		{_Init(0, 0, _Mode(_W)); }
	explicit basic_stringbuf(const _Mystr& _S,
		ios_base::openmode _W = ios_base::in | ios_base::out)
		{_Init(_S.c_str(), _S.size(), _Mode(_W)); }
	virtual ~basic_stringbuf()
		{_Tidy(); }
	typedef typename _Tr::int_type int_type;
	typedef typename _Tr::pos_type pos_type;
	typedef typename _Tr::off_type off_type;
	_Mystr str() const
		{if (!(_Strmode & _Constant) && _Mysb::pptr() != 0)
			{_Mystr _Str(_Mysb::pbase(),
				(_Seekhigh < _Mysb::pptr()
				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
			return (_Str); }
		else if (!(_Strmode & _Noread) && _Mysb::gptr() != 0)
			{_Mystr _Str(_Mysb::eback(),
				_Mysb::egptr() - _Mysb::eback());
			return (_Str); }
		else
			{_Mystr _Nul;
			return (_Nul); }}
	void str(const _Mystr& _S)
		{_Tidy();
		_Init(_S.c_str(), _S.size(), _Strmode); }
protected:
	virtual int_type overflow(int_type _C = _Tr::eof())
		{if (_Tr::eq_int_type(_Tr::eof(), _C))
			return (_Tr::not_eof(_C));
		else if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{*_Mysb::_Pninc() = _Tr::to_char_type(_C);
			return (_C); }
		else if (_Strmode & _Constant)
			return (_Tr::eof());
		else
			{size_t _Os = _Mysb::gptr() == 0
				? 0 : _Mysb::epptr() - _Mysb::eback();
			size_t _Ns = _Os;
			size_t _Inc = _Ns / 2 < _MINSIZE
				? _MINSIZE : _Ns / 2;
			_E *_P = 0;
			while (0 < _Inc && INT_MAX - _Inc < _Ns)
				_Inc /= 2;
			if (0 < _Inc)
				{_Ns += _Inc;
				_P = _Al.allocate(_Ns, (void *)0); }
			if (_P == 0)
				_Nomemory();
			if (0 < _Os)
				_Tr::copy(_P, _Mysb::eback(), _Os);
			if (_Strmode & _Allocated)
				_Al.deallocate(_Mysb::eback(), _Os);
			_Strmode |= _Allocated;
			if (_Os == 0)
				{_Seekhigh = _P;
				_Mysb::setp(_P, _P + _Ns);
				_Mysb::setg(_P, _P, _Noread ? _P : _P + 1); }
			else
				{_Seekhigh = _Seekhigh - _Mysb::eback() + _P;
				_Mysb::setp(_Mysb::pbase() - _Mysb::eback() + _P,
					_Mysb::pptr() - _Mysb::eback() + _P,
					_P + _Ns);
				if (_Strmode & _Noread)
					_Mysb::setg(_P, _P, _P);
				else
					_Mysb::setg(_P,
						_Mysb::gptr() - _Mysb::eback() + _P,
						_Mysb::pptr() + 1); }
			*_Mysb::_Pninc() = _Tr::to_char_type(_C);
			return (_C); }}
	virtual int_type pbackfail(int_type _C = _Tr::eof())
		{if (_Mysb::gptr() == 0
			|| _Mysb::gptr() <= _Mysb::eback()
			|| !_Tr::eq_int_type(_Tr::eof(), _C)
			&& !_Tr::eq(_Tr::to_char_type(_C), _Mysb::gptr()[-1])
			&& _Strmode & _Constant)
			return (_Tr::eof());
		else
			{_Mysb::gbump(-1);
			if (!_Tr::eq_int_type(_Tr::eof(), _C))
				*_Mysb::gptr() = _Tr::to_char_type(_C);
			return (_Tr::not_eof(_C)); }}
	virtual int_type underflow()
		{if (_Mysb::gptr() == 0)
			return (_Tr::eof());
		else if (_Mysb::gptr() < _Mysb::egptr())
			return (_Tr::to_int_type(*_Mysb::gptr()));
		else if (_Strmode & _Noread || _Mysb::pptr() == 0
			|| _Mysb::pptr() <= _Mysb::gptr()
				&& _Seekhigh <= _Mysb::gptr())
			return (_Tr::eof());
		else
			{if (_Seekhigh < _Mysb::pptr())
				_Seekhigh = _Mysb::pptr();
			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
			return (_Tr::to_int_type(*_Mysb::gptr())); }}
	virtual pos_type seekoff(off_type _O, ios_base::seekdir _Way,
		ios_base::openmode _Which = ios_base::in | ios_base::out)
		{if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();
		if (_Which & ios_base::in && _Mysb::gptr() != 0)
			{if (_Way == ios_base::end)
				_O += _Seekhigh - _Mysb::eback();
			else if (_Way == ios_base::cur
				&& !(_Which & ios_base::out))
				_O += _Mysb::gptr() - _Mysb::eback();
			else if (_Way != ios_base::beg)
				_O = _BADOFF;
			if (0 <= _O && _O <= _Seekhigh - _Mysb::eback())
				{_Mysb::gbump(_Mysb::eback()
					- _Mysb::gptr() + _O);
				if (_Which & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr()); }
			else
				_O = _BADOFF; }
		else if (_Which & ios_base::out && _Mysb::pptr() != 0)
			{if (_Way == ios_base::end)
				_O += _Seekhigh - _Mysb::eback();
			else if (_Way == ios_base::cur)
				_O += _Mysb::pptr() - _Mysb::eback();
			else if (_Way != ios_base::beg)
				_O = _BADOFF;
			if (0 <= _O && _O <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump(_Mysb::eback() - _Mysb::pptr() + _O);
			else
				_O = _BADOFF; }
		else
			_O = _BADOFF;
		return (pos_type(_O)); }
	virtual pos_type seekpos(pos_type _P,
		ios_base::openmode _Which = ios_base::in | ios_base::out)
		{streamoff _O = (streamoff)_P;
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();
		if (_O == _BADOFF)
			;
		else if (_Which & ios_base::in && _Mysb::gptr() != 0)
			{if (0 <= _O && _O <= _Seekhigh - _Mysb::eback())
				{_Mysb::gbump(_Mysb::eback()
					- _Mysb::gptr() + _O);
				if (_Which & ios_base::out
					&& _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr()); }
			else
				_O = _BADOFF; }
		else if (_Which & ios_base::out && _Mysb::pptr() != 0)
			{if (0 <= _O && _O <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump(_Mysb::eback() - _Mysb::pptr() + _O);
			else
				_O = _BADOFF; }
		else
			_O = _BADOFF;
		return (streampos(_O)); }
	void _Init(const _E *_S, size_t _N, _Strstate _M)
		{_Pendsave = 0, _Seekhigh = 0;
		_Strmode = _M;
		if (_N != 0 && (_Strmode & (_Noread | _Constant))
			!= (_Noread | _Constant))
			{_E *_P = _Al.allocate(_N, (void *)0);
			_Tr::copy(_P, _S, _N);
			_Seekhigh = _P + _N;
			if (!(_Strmode & _Noread))
				_Mysb::setg(_P, _P, _P + _N);
			if (!(_Strmode & _Constant))
				{_Mysb::setp(_P, _P + _N);
				if (_Mysb::gptr() == 0)
					_Mysb::setg(_P, _P, _P); }
			_Strmode |= _Allocated; }}
	void _Tidy()
		{if (_Strmode & _Allocated)
			_Al.deallocate(_Mysb::eback(),
				(_Mysb::pptr() != 0 ? _Mysb::epptr()
					: _Mysb::egptr()) - _Mysb::eback());
		_Mysb::setg(0, 0, 0);
		_Mysb::setp(0, 0);
		_Seekhigh = 0;
		_Strmode &= ~_Allocated; }
private:
	enum {_MINSIZE = 32};
	_Strstate _Mode(ios_base::openmode _W)
		{_Strstate _St = (_Strstate)0;
		if (!(_W & ios_base::in))
			_St |= _Noread;
		if (!(_W & ios_base::out))
			_St |= _Constant;
		return (_St); }
	_E *_Pendsave, *_Seekhigh;
	_Strstate _Strmode;
	_A _Al;
	};

 #ifdef _DLL
  #ifdef __FORCE_INSTANCE
template class _CRTIMP2 basic_stringbuf<char,
	char_traits<char> >;
template class _CRTIMP2 basic_stringbuf<wchar_t,
	char_traits<wchar_t> >;
  #else           // __FORCE_INSTANCE
   #pragma warning(disable:4231) /* extern before template is non-standard */
extern template class _CRTIMP2 basic_stringbuf<char,
	char_traits<char> >;
extern template class _CRTIMP2 basic_stringbuf<wchar_t,
	char_traits<wchar_t> >;
   #pragma warning(default:4231) /* restore previous warning */
  #endif          // __FORCE_INSTANCE
 #endif          // _DLL

		// TEMPLATE CLASS basic_istringstream
template<class _E, class _Tr, class _A>
	class basic_istringstream : public basic_istream<_E, _Tr> {
public:
	typedef basic_stringbuf<_E, _Tr, _A> _Mysb;
	typedef basic_string<_E, _Tr, _A> _Mystr;
	explicit basic_istringstream(ios_base::openmode _M =
		ios_base::in)
		: basic_istream<_E, _Tr>(&_Sb), _Sb(_M | ios_base::in) {}
	explicit basic_istringstream(const _Mystr& _S,
		ios_base::openmode _M = ios_base::in)
		: basic_istream<_E, _Tr>(&_Sb),
			_Sb(_S, _M | ios_base::in) {}
	virtual ~basic_istringstream()
		{}
	_Mysb *rdbuf() const
		{return ((_Mysb *)&_Sb); }
	_Mystr str() const
		{return (_Sb.str()); }
	void str(const _Mystr& _S)
		{_Sb.str(_S); }
private:
	_Mysb _Sb;
	};

 #ifdef _DLL
  #ifdef __FORCE_INSTANCE
template class _CRTIMP2 basic_istringstream<char,
	char_traits<char> >;
template class _CRTIMP2 basic_istringstream<wchar_t,
	char_traits<wchar_t> >;
  #else           // __FORCE_INSTANCE
   #pragma warning(disable:4231) /* extern before template is non-standard */
extern template class _CRTIMP2 basic_istringstream<char,
	char_traits<char> >;
extern template class _CRTIMP2 basic_istringstream<wchar_t,
	char_traits<wchar_t> >;
   #pragma warning(default:4231) /* restore previous warning */
  #endif          // __FORCE_INSTANCE
 #endif          // _DLL

		// TEMPLATE CLASS basic_ostringstream
template<class _E, class _Tr, class _A>
	class basic_ostringstream : public basic_ostream<_E, _Tr> {
public:
	typedef basic_stringbuf<_E, _Tr, _A> _Mysb;
	typedef basic_string<_E, _Tr, _A> _Mystr;
	explicit basic_ostringstream(ios_base::openmode _M =
		ios_base::out)
		: basic_ostream<_E, _Tr>(&_Sb), _Sb(_M | ios_base::out) {}
	explicit basic_ostringstream(const _Mystr& _S,
		ios_base::openmode _M = ios_base::out)
		: basic_ostream<_E, _Tr>(&_Sb),
			_Sb(_S, _M | ios_base::out) {}
	virtual ~basic_ostringstream()
		{}
	_Mysb *rdbuf() const
		{return ((_Mysb *)&_Sb); }
	_Mystr str() const
		{return (_Sb.str()); }
	void str(const _Mystr& _S)
		{_Sb.str(_S); }
private:
	_Mysb _Sb;
	};

 #ifdef _DLL
  #ifdef __FORCE_INSTANCE
template class _CRTIMP2 basic_ostringstream<char,
	char_traits<char> >;
template class _CRTIMP2 basic_ostringstream<wchar_t,
	char_traits<wchar_t> >;
  #else           // __FORCE_INSTANCE
   #pragma warning(disable:4231) /* extern before template is non-standard */
extern template class _CRTIMP2 basic_ostringstream<char,
	char_traits<char> >;
extern template class _CRTIMP2 basic_ostringstream<wchar_t,
	char_traits<wchar_t> >;
   #pragma warning(default:4231) /* restore previous warning */
  #endif          // __FORCE_INSTANCE
 #endif          // _DLL

		// TEMPLATE CLASS basic_stringstream
template<class _E, class _Tr, class _A>
	class basic_stringstream : public basic_iostream<_E, _Tr> {
public:
	typedef _E char_type;
	typedef _Tr traits_type;
	typedef typename _Tr::int_type int_type;
	typedef typename _Tr::pos_type pos_type;
	typedef typename _Tr::off_type off_type;
	typedef basic_string<_E, _Tr, _A> _Mystr;
	explicit basic_stringstream(ios_base::openmode _W =
		ios_base::in | ios_base::out)
		: basic_iostream<_E, _Tr>(&_Sb), _Sb(_W) {}
	explicit basic_stringstream(const _Mystr& _S,
		ios_base::openmode _W = ios_base::in | ios_base::out)
		: basic_iostream<_E, _Tr>(&_Sb), _Sb(_S, _W) {}
	virtual ~basic_stringstream()
		{}
	basic_stringbuf<_E, _Tr, _A> *rdbuf() const
		{return ((basic_stringbuf<_E, _Tr, _A> *)&_Sb); }
	_Mystr str() const
		{return (_Sb.str()); }
	void str(const _Mystr& _S)
		{_Sb.str(_S); }
private:
	basic_stringbuf<_E, _Tr, _A> _Sb;
	};

 #ifdef _DLL
  #ifdef __FORCE_INSTANCE
template class _CRTIMP2 basic_stringstream<char,
	char_traits<char> >;
template class _CRTIMP2 basic_stringstream<wchar_t,
	char_traits<wchar_t> >;
  #else           // __FORCE_INSTANCE
   #pragma warning(disable:4231) /* extern before template is non-standard */
extern template class _CRTIMP2 basic_stringstream<char,
	char_traits<char> >;
extern template class _CRTIMP2 basic_stringstream<wchar_t,
	char_traits<wchar_t> >;
   #pragma warning(default:4231) /* restore previous warning */
  #endif          // __FORCE_INSTANCE
 #endif          // _DLL
_STD_END
#if 1200 <= _MSC_VER
#pragma warning(pop)
#endif
#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif /* _SSTREAM_ */

/*
 * Copyright (c) 1994-1998 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 V2.33:099I */
