// queue standard header

#if 1000 < _MSC_VER /*IFSTRIP=IGN*/
#pragma once
#endif

#ifndef _QUEUE_
#define _QUEUE_
#include <algorithm>
#include <deque>
#include <functional>
#include <vector>

#ifdef  _MSC_VER
#pragma pack(push,8)
#endif  /* _MSC_VER */
#if 1200 <= _MSC_VER
#pragma warning(push,3)
#endif
_STD_BEGIN
		// TEMPLATE CLASS queue
template<class _Ty, class _C = deque<_Ty> >
	class queue {
public:
	typedef _C container_type;
	typedef typename _C::value_type value_type;
	typedef typename _C::size_type size_type;
	queue()
		: c() {}
	explicit queue(const _C& _Cont)
		: c(_Cont) {}
	bool empty() const
		{return (c.empty()); }
	size_type size() const
		{return (c.size()); }
	value_type& front()
		{return (c.front()); }
	const value_type& front() const
		{return (c.front()); }
	value_type& back()
		{return (c.back()); }
	const value_type& back() const
		{return (c.back()); }
	void push(const value_type& _X)
		{c.push_back(_X); }
	void pop()
		{c.pop_front(); }
	bool _Eq(const queue<_Ty, _C>& _X) const
		{return (c == _X.c); }
	bool _Lt(const queue<_Ty, _C>& _X) const
		{return (c < _X.c); }
protected:
	_C c;
	};

		// queue TEMPLATE FUNCTIONS
template<class _Ty, class _C> inline
	bool operator==(const queue<_Ty, _C>& _X,
		const queue<_Ty, _C>& _Y)
	{return (_X._Eq(_Y)); }
template<class _Ty, class _C> inline
	bool operator!=(const queue<_Ty, _C>& _X,
		const queue<_Ty, _C>& _Y)
	{return (!(_X == _Y)); }
template<class _Ty, class _C> inline
	bool operator<(const queue<_Ty, _C>& _X,
		const queue<_Ty, _C>& _Y)
	{return (_X._Lt(_Y)); }
template<class _Ty, class _C> inline
	bool operator>(const queue<_Ty, _C>& _X,
		const queue<_Ty, _C>& _Y)
	{return (_Y < _X); }
template<class _Ty, class _C> inline
	bool operator<=(const queue<_Ty, _C>& _X,
		const queue<_Ty, _C>& _Y)
	{return (!(_Y < _X)); }
template<class _Ty, class _C> inline
	bool operator>=(const queue<_Ty, _C>& _X,
		const queue<_Ty, _C>& _Y)
	{return (!(_X < _Y)); }

		// TEMPLATE CLASS priority_queue
template<class _Ty, class _C = vector<_Ty>,
	class _Pr = less<typename _C::value_type> >
	class priority_queue {
public:
	typedef _C container_type;
	typedef typename _C::value_type value_type;
	typedef typename _C::size_type size_type;
	priority_queue()
		: c(), comp() {}
	explicit priority_queue(const _Pr& _X)
		: c(), comp(_X) {}
	priority_queue(const _Pr& _X, const _C& _Cont)
		: c(_Cont), comp(_X)
		{make_heap(c.begin(), c.end(), comp); }
	template<class _It>
		priority_queue(_It _F, _It _L)
		: c(_F, _L), comp()
		{make_heap(c.begin(), c.end(), comp); }
	template<class _It>
		priority_queue(_It _F, _It _L, const _Pr& _X)
		: c(_F, _L), comp(_X)
		{make_heap(c.begin(), c.end(), comp); }
	template<class _It>
		priority_queue(_It _F, _It _L, const _Pr& _X,
			const _C& _Cont)
		: c(_Cont), comp(_X)
		{c.insert(c.end(), _F, _L);
		make_heap(c.begin(), c.end(), comp); }
	bool empty() const
		{return (c.empty()); }
	size_type size() const
		{return (c.size()); }
	const value_type& top() const
		{return (c.front()); }
	void push(const value_type& _X)
		{c.push_back(_X);
		push_heap(c.begin(), c.end(), comp); }
	void pop()
		{pop_heap(c.begin(), c.end(), comp);
		c.pop_back(); }
protected:
	_C c;
	_Pr comp;
	};
_STD_END
#if 1200 <= _MSC_VER
#pragma warning(pop)
#endif
#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif /* _QUEUE_ */

/*
 * Copyright (c) 1995-1998 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
 V2.33:099I */
