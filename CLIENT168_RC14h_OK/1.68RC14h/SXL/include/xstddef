// xstddef standard header

#if 1000 < _MSC_VER /*IFSTRIP=IGN*/
#pragma once
#endif

#ifndef _XSTDDEF_
#define _XSTDDEF_
#ifndef _YVALS
 #include <yvals.h>
#endif
#include <cstddef>

#ifdef  _MSC_VER
#pragma pack(push,8)
#endif  /* _MSC_VER */
#if 1200 <= _MSC_VER
#pragma warning(push,3)
#endif
_STD_BEGIN
		// EXCEPTION MACROS
 #if _HAS_EXCEPTIONS
 #define _TRY_BEGIN	try {
 #define _CATCH(x)	} catch (x) {
 #define _CATCH_ALL	} catch (...) {
 #define _CATCH_END	}
 #define _RAISE(x)	throw (x)
 #define _RERAISE	throw
 #define _THROW0()	throw ()
 #define _THROW1(x)	throw (x)
 #define _THROW(x, y)	throw x(y)
 #else	/* no exceptions */
 #define _TRY_BEGIN	{{
 #define _CATCH(x)	} if (0) {
 #define _CATCH_ALL	} if (0) {
 #define _CATCH_END	}}
 #define _RAISE(x)	_Throw(x)
 #define _RERAISE
 #define _THROW0()
 #define _THROW1(x)
 #define _THROW(x, y)	x(y)._Raise()
 #endif /* _HAS_EXCEPTIONS */

		// typename KEYWORD
 #define _TEMPLATE	template<>

 #ifndef _TEMPLATE_STAT
  #define _TEMPLATE_STAT	template<>
 #endif

 #ifndef _TEMPLATE_MEMBER
  #define _TEMPLATE_MEMBER	template
 #endif

		// BITMASK MACROS
 #define _BITMASK(E, T)	typedef int T
 #define _BITMASK_OPS(T)

		// MISCELLANEOUS MACROS
#define _DESTRUCTOR(ty, ptr)	(ptr)->~ty()
#define _MESG(str)	str
#define _PROTECTED	protected

 #define _TDEF(x)		= x
 #define _TDEF2(x, y)	= x, y
 #define _CNTSIZ(iter)	ptrdiff_t
 #define _STCONS(ty, name, val)	enum {name = val}
 #define _CSTD	::

		// TYPE DEFINITIONS
enum _Uninitialized {_Noinit};

		// FUNCTIONS
_CRTIMP2 void __cdecl _Nomemory();

 #ifdef _Loc_atexit
_CRTIMP2 bool _Loc_atexit(void (__cdecl *)());
 #else
_C_LIB_DECL
typedef void _Atexit_fun();
_END_C_LIB_DECL
  #define _Loc_atexit(fun)	atexit((_Atexit_fun *)(fun))
 #endif
_STD_END
#if 1200 <= _MSC_VER
#pragma warning(pop)
#endif
#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif /* _XSTDDEF_ */

/*
 * Copyright (c) 1995-1999 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 V2.33:099I */
