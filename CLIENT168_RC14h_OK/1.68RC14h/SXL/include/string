// string standard header

#if 1000 < _MSC_VER /*IFSTRIP=IGN*/
#pragma once
#endif

#ifndef _STRING_
#define _STRING_
#include <istream>

#ifdef  _MSC_VER
#pragma pack(push,8)
#endif  /* _MSC_VER */
#if 1200 <= _MSC_VER
#pragma warning(push,3)
#endif
 #pragma warning(disable: 4189)
_STD_BEGIN
		// basic_string TEMPLATE OPERATORS
template<class _E, class _Tr, class _A> inline
	basic_string<_E, _Tr, _A> __cdecl operator+(
		const basic_string<_E, _Tr, _A>& _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (basic_string<_E, _Tr, _A>(_L) += _R); }
template<class _E, class _Tr, class _A> inline
	basic_string<_E, _Tr, _A> __cdecl operator+(const _E *_L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (basic_string<_E, _Tr, _A>(_L) += _R); }
template<class _E, class _Tr, class _A> inline
	basic_string<_E, _Tr, _A> __cdecl operator+(
		const _E _L, const basic_string<_E, _Tr, _A>& _R)
	{return (basic_string<_E, _Tr, _A>(1, _L) += _R); }
template<class _E, class _Tr, class _A> inline
	basic_string<_E, _Tr, _A> __cdecl operator+(
		const basic_string<_E, _Tr, _A>& _L,
		const _E *_R)
	{return (basic_string<_E, _Tr, _A>(_L) += _R); }
template<class _E, class _Tr, class _A> inline
	basic_string<_E, _Tr, _A> __cdecl operator+(
		const basic_string<_E, _Tr, _A>& _L, const _E _R)
	{return (basic_string<_E, _Tr, _A>(_L) += _R); }

template<class _E, class _Tr, class _A> inline
	bool __cdecl operator==(const basic_string<_E, _Tr, _A>& _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (_L.compare(_R) == 0); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator==(const _E * _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (_R.compare(_L) == 0); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator==(const basic_string<_E, _Tr, _A>& _L,
		const _E *_R)
	{return (_L.compare(_R) == 0); }

template<class _E, class _Tr, class _A> inline
	bool __cdecl operator!=(const basic_string<_E, _Tr, _A>& _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (!(_L == _R)); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator!=(const _E *_L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (!(_L == _R)); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator!=(const basic_string<_E, _Tr, _A>& _L,
		const _E *_R)
	{return (!(_L == _R)); }

template<class _E, class _Tr, class _A> inline
	bool __cdecl operator<(const basic_string<_E, _Tr, _A>& _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (_L.compare(_R) < 0); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator<(const _E * _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (_R.compare(_L) > 0); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator<(const basic_string<_E, _Tr, _A>& _L,
		const _E *_R)
	{return (_L.compare(_R) < 0); }

template<class _E, class _Tr, class _A> inline
	bool __cdecl operator>(const basic_string<_E, _Tr, _A>& _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (_R < _L); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator>(const _E * _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (_R < _L); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator>(const basic_string<_E, _Tr, _A>& _L,
		const _E *_R)
	{return (_R < _L); }

template<class _E, class _Tr, class _A> inline
	bool __cdecl operator<=(const basic_string<_E, _Tr, _A>& _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (!(_R < _L)); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator<=(const _E * _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (!(_R < _L)); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator<=(const basic_string<_E, _Tr, _A>& _L,
		const _E *_R)
	{return (!(_R < _L)); }

template<class _E, class _Tr, class _A> inline
	bool __cdecl operator>=(const basic_string<_E, _Tr, _A>& _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (!(_L < _R)); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator>=(const _E * _L,
		const basic_string<_E, _Tr, _A>& _R)
	{return (!(_L < _R)); }
template<class _E, class _Tr, class _A> inline
	bool __cdecl operator>=(const basic_string<_E, _Tr, _A>& _L,
		const _E *_R)
	{return (!(_L < _R)); }

 #ifdef _DLL
  #ifndef CRTDLL2
   #pragma warning(disable:4231) /* extern before template is non-standard */
extern template class _CRTIMP2 basic_string<char,
	char_traits<char>, allocator<char> > __cdecl operator+(
		const basic_string<char, char_traits<char>, allocator<char> >&,
		const basic_string<char, char_traits<char>, allocator<char> >&);
extern template class _CRTIMP2 basic_string<char,
	char_traits<char>, allocator<char> > __cdecl operator+(
		const char *,
		const basic_string<char, char_traits<char>, allocator<char> >&);
extern template class _CRTIMP2 basic_string<char,
	char_traits<char>, allocator<char> > __cdecl operator+(
		const char,
		const basic_string<char, char_traits<char>, allocator<char> >&);
extern template class _CRTIMP2 basic_string<char,
	char_traits<char>, allocator<char> > __cdecl operator+(
		const basic_string<char, char_traits<char>, allocator<char> >&,
		const char *);
extern template class _CRTIMP2 basic_string<char,
	char_traits<char>, allocator<char> > __cdecl operator+(
		const basic_string<char, char_traits<char>, allocator<char> >&,
		const char);

extern template _CRTIMP2 bool __cdecl operator==(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator==(
	const char *,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator==(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const char *);

extern template _CRTIMP2 bool __cdecl operator!=(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator!=(
	const char *,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator!=(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const char *);

extern template _CRTIMP2 bool __cdecl operator<(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator<(
	const char *,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator<(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const char *);

extern template _CRTIMP2 bool __cdecl operator>(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator>(
	const char *,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator>(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const char *);

extern template _CRTIMP2 bool __cdecl operator<=(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator<=(
	const char *,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator<=(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const char *);

extern template _CRTIMP2 bool __cdecl operator>=(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator>=(
	const char *,
	const basic_string<char, char_traits<char>, allocator<char> >&);
extern template _CRTIMP2 bool __cdecl operator>=(
	const basic_string<char, char_traits<char>, allocator<char> >&,
	const char *);

extern template class _CRTIMP2 basic_string<wchar_t,
	char_traits<wchar_t>, allocator<wchar_t> > __cdecl operator+(
		const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
		const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template class _CRTIMP2 basic_string<wchar_t,
	char_traits<wchar_t>, allocator<wchar_t> > __cdecl operator+(
		const wchar_t *,
		const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template class _CRTIMP2 basic_string<wchar_t,
	char_traits<wchar_t>, allocator<wchar_t> > __cdecl operator+(
		const wchar_t,
		const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template class _CRTIMP2 basic_string<wchar_t,
	char_traits<wchar_t>, allocator<wchar_t> > __cdecl operator+(
		const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
		const wchar_t *);
extern template class _CRTIMP2 basic_string<wchar_t,
	char_traits<wchar_t>, allocator<wchar_t> > __cdecl operator+(
		const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
		const wchar_t);

extern template _CRTIMP2 bool __cdecl operator==(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator==(
	const wchar_t *,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator==(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const wchar_t *);

extern template _CRTIMP2 bool __cdecl operator!=(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator!=(
	const wchar_t *,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator!=(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const wchar_t *);

extern template _CRTIMP2 bool __cdecl operator<(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator<(
	const wchar_t *,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator<(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const wchar_t *);

extern template _CRTIMP2 bool __cdecl operator>(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator>(
	const wchar_t *,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator>(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const wchar_t *);

extern template _CRTIMP2 bool __cdecl operator<=(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator<=(
	const wchar_t *,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator<=(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const wchar_t *);

extern template _CRTIMP2 bool __cdecl operator>=(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator>=(
	const wchar_t *,
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template _CRTIMP2 bool __cdecl operator>=(
	const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
	const wchar_t *);

   #pragma warning(default:4231) /* restore previous warning */
  #endif          // CRTDLL2
 #endif          // _DLL

		// basic_string INSERTERS AND EXTRACTORS
template<class _E, class _Tr, class _A> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I,
		basic_string<_E, _Tr, _A>& _X)
	{typedef ctype<_E> _Ctype;
	typedef basic_istream<_E, _Tr> _Myis;
	typedef basic_string<_E, _Tr, _A> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;
	ios_base::iostate _St = ios_base::goodbit;
	bool _Chg = false;
	const typename _Myis::sentry _Ok(_I);
	if (_Ok)
		{const _Ctype& _Fac = _USE(_I.getloc(), _Ctype);
		_X.erase();
		_TRY_IO_BEGIN
		_Mysizt _N = 0 < _I.width()
			&& (_Mysizt)_I.width() < _X.max_size()
				? (_Mysizt)_I.width() : _X.max_size();
		typename _Tr::int_type _C = _I.rdbuf()->sgetc();
		for (; 0 < --_N; _C = _I.rdbuf()->snextc())
			if(_Tr::eq_int_type(_Tr::eof(), _C))
				{_St |= ios_base::eofbit;
				break; }
			else if (_Fac.is(_Ctype::space,
				_Tr::to_char_type(_C)))
				break;
			else
				{_X.append(1, _Tr::to_char_type(_C));
				_Chg = true; }
		_CATCH_IO_(_I); }
	_I.width(0);
	if (!_Chg)
		_St |= ios_base::failbit;
	_I.setstate(_St);
	return (_I); }

template<class _E, class _Tr, class _A> inline
	basic_istream<_E, _Tr>& getline(basic_istream<_E, _Tr>& _I,
		basic_string<_E, _Tr, _A>& _X)
	{return (getline(_I, _X, _I.widen('\n'))); }
template<class _E, class _Tr, class _A> inline
	basic_istream<_E, _Tr>& getline(basic_istream<_E, _Tr>& _I,
		basic_string<_E, _Tr, _A>& _X, const _E _D)
	{typedef basic_istream<_E, _Tr> _Myis;
	ios_base::iostate _St = ios_base::goodbit;
	bool _Chg = false;
	const typename _Myis::sentry _Ok(_I, true);
	if (_Ok)
		{_TRY_IO_BEGIN
		_X.erase();
		const typename _Tr::int_type _Di = _Tr::to_int_type(_D);
		typename _Tr::int_type _C = _I.rdbuf()->sgetc();
		for (; ; _C = _I.rdbuf()->snextc())
			if (_Tr::eq_int_type(_Tr::eof(), _C))
				{_St |= ios_base::eofbit;
				break; }
			else if (_Tr::eq_int_type(_C, _Di))
				{_Chg = true;
				_I.rdbuf()->sbumpc();
				break; }
			else if (_X.max_size() <= _X.size())
				{_St |= ios_base::failbit;
				break; }
			else
				_X += _Tr::to_char_type(_C), _Chg = true;
		_CATCH_IO_(_I); }
	if (!_Chg)
		_St |= ios_base::failbit;
	_I.setstate(_St);
	return (_I); }

template<class _E, class _Tr, class _A> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O,
		const basic_string<_E, _Tr, _A>& _X)
	{typedef basic_ostream<_E, _Tr> _Myos;
	typedef basic_string<_E, _Tr, _A> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;
	ios_base::iostate _St = ios_base::goodbit;
	_Mysizt _N = _X.size();
	_Mysizt _M = _O.width() <= 0
		|| (_Mysizt)_O.width() <= _N
			? 0 : (_Mysizt)_O.width() - _N;
	const typename _Myos::sentry _Ok(_O);
	if (!_Ok)
		_St |= ios_base::badbit;
	else
		{_TRY_IO_BEGIN
		if ((_O.flags() & ios_base::adjustfield)
			!= ios_base::left)
			for (; 0 < _M; --_M)
				if (_Tr::eq_int_type(_Tr::eof(),
					_O.rdbuf()->sputc(_O.fill())))
					{_St |= ios_base::badbit;
					break; }
		if (_St == ios_base::goodbit)
			for (_Mysizt _I = 0; _I < _N; ++_I)
				if (_Tr::eq_int_type(_Tr::eof(),
					_O.rdbuf()->sputc(_X[_I])))
					{_St |= ios_base::badbit;
					break; }
		if (_St == ios_base::goodbit)
			for (; 0 < _M; --_M)
				if (_Tr::eq_int_type(_Tr::eof(),
					_O.rdbuf()->sputc(_O.fill())))
					{_St |= ios_base::badbit;
					break; }
		_O.width(0);
		_CATCH_IO_(_O) }
	_O.setstate(_St);
	return (_O); }

 #ifdef _DLL
  #ifndef CRTDLL2
   #pragma warning(disable:4231) /* extern before template is non-standard */
extern template class _CRTIMP2 basic_istream<char,
	char_traits<char> >& __cdecl operator>>(
		basic_istream<char, char_traits<char> >&,
		basic_string<char, char_traits<char>, allocator<char> >&);
extern template class _CRTIMP2 basic_istream<char,
	char_traits<char> >& __cdecl getline(
		basic_istream<char, char_traits<char> >&,
		basic_string<char, char_traits<char>, allocator<char> >&);
extern template class _CRTIMP2 basic_istream<char,
	char_traits<char> >& __cdecl getline(
		basic_istream<char, char_traits<char> >&,
		basic_string<char, char_traits<char>, allocator<char> >&,
		const char);
extern template class _CRTIMP2 basic_ostream<char,
	char_traits<char> >& __cdecl operator<<(
		basic_ostream<char, char_traits<char> >&,
		const basic_string<char, char_traits<char>, allocator<char> >&);

extern template class _CRTIMP2 basic_istream<wchar_t,
	char_traits<wchar_t> >& __cdecl operator>>(
		basic_istream<wchar_t, char_traits<wchar_t> >&,
		basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template class _CRTIMP2 basic_istream<wchar_t,
	char_traits<wchar_t> >& __cdecl getline(
		basic_istream<wchar_t, char_traits<wchar_t> >&,
		basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
extern template class _CRTIMP2 basic_istream<wchar_t,
	char_traits<wchar_t> >& __cdecl getline(
		basic_istream<wchar_t, char_traits<wchar_t> >&,
		basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&,
		const wchar_t);
extern template class _CRTIMP2 basic_ostream<wchar_t,
	char_traits<wchar_t> >& __cdecl operator<<(
		basic_ostream<wchar_t, char_traits<wchar_t> >&,
		const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >&);
   #pragma warning(default:4231) /* restore previous warning */
  #endif          // CRTDLL2
 #endif          // _DLL
_STD_END
 #pragma warning(default: 4189)
#if 1200 <= _MSC_VER
#pragma warning(pop)
#endif
#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif /* _STRING */

/*
 * Copyright (c) 1994-1999 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 V2.33:099I */
